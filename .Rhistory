func<-function(vec1){
if (vec1> 10)
print(vec1)
}
lapply(vec1, func)
# Criando um Vetor
vec1 <- c(12, 3, 4, 19, 34)
lapply(vec1, func)
func<-function(vec1){
if (vec1> 10)
print(vec1)
else{
NULL
}
}
lapply(vec1, func)
# Exercício 1 - Pesquise pela função que permite listar todos os arquivo no diretório de trabalho
list.files()
func<-function(vec1){
if (vec1[][]> 10)
print(vec1[][])
}
lapply(vec1, func)
func<-function(vec1){
if (vec1[][]> 10)
print(vec1[][])
else{
break()
}
}
lapply(vec1, func)
func<-function(vec1){
if (vec1[][]> 10)
print(vec1[][])
else{
NULL
}
}
lapply(vec1, func)
vec1
func<-function(X){
if (X> 10)
print(X)
else{
NULL
}
}
lapply(vec1, func(vec1))
func<-function(vec1){
if (vec1> 10)
print(vec1)
else{
NULL
}
}
setwd("C:/DSA/RAzureMachineLearning/CursoR/DSA.SV.RAzureML.Cap03")
vec<-c(1:5)
mat<-matrix(c(1:10), ncol = 5)
lst2<-list(1:5)
df<data.frame(c(vec,mat,lst2))
# Exercício 6 - Crie um vetor, matriz, lista e dataframe e faça a nomeação de cada um dos objetos
vec<-c(1:5)
df<data.frame(vec,mat,lst2)
vec
mat
lst2
df<data.frame(c(as.list(vec),mat,lst2)
df<data.frame(c(as.list(vec),mat,lst2))
# Exercício 7 - Considere a matriz abaixo. Atribua valores NA de forma aletória para 50 elementos da matriz
# Dica: use a função sample()
mat2 <- matrix(1:90, 10)
?sample
# Exercício 7 - Considere a matriz abaixo. Atribua valores NA de forma aletória para 50 elementos da matriz
# Dica: use a função sample()
mat2 <- matrix(1:90, 10)
mat2
sample(mat2, 50, replace = TRUE)
sample(mat2, 50, replace = TRUE)
# Exercício 7 - Considere a matriz abaixo. Atribua valores NA de forma aletória para 50 elementos da matriz
# Dica: use a função sample()
mat2 <- matrix(1:90, 10)
mat2
sample(mat2, 50, replace = TRUE)
sample(mat2, 50, replace = FALSE)
# Exercício 8 - Para a matriz abaixo, calcule a soma por linha e por coluna
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
apply(mat1,sum)
apply(mat1, sum)
?apply
apply(mat1,mat1,sum)
tapply(mat1,sum)
sapply(mat1,sum)
sapply(mat1,sum)
mat1
x <- matrix(c(20, 13, 65, 32, 45, 12, 76, 49, 82), nr = 3, byrow = T)
x
apply(x, mean)
apply(x, 1, mean)
apply(x, 2, mean)
mat1
apply(mat1,mat1[][],sum)
apply(mat1,mat1[1][],sum)
apply(mat1,mat1[1],sum)
linha<-apply(mat1,mat1[1],sum)
coluna<-apply(mat1,mat1[][1],sum)
linha
coluna# Exercício 9 - Para o vetor abaixo, ordene os valores em ordem crescente
coluna# Exercício 9 - Para o vetor abaixo, ordene os valores em ordem crescente
coluna
coluna<-apply(mat1,mat1[][2],sum)
coluna
coluna<-apply(mat1,mat1[1][2],sum)
coluna<-apply(mat1,2,sum)
coluna
linha<-apply(mat1,1,sum)
linha
coluna
# Exercício 9 - Para o vetor abaixo, ordene os valores em ordem crescente
a <- c(100, 10, 10000, 1000)
a
sort(a, decreasing = FALSE)
# # Exercício 10 - Imprima no console todos os elementos da matriz abaixo que forem maiores que 15
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
for (i in 1:length(mat1)){
if (mat1[i]>15){
print(vec1[i])
}else
print('Menor que 15')
}
for (i in 1:length(mat1)){
if (mat1[i]>15){
print(mat1[i])
}else
print('Menor que 15')
}
mat1
for (i in 1:length(mat1)){
if (mat1[i]>15){
print(mat1[i])
}
}
c<-for (i in 1:length(mat1)){
if (mat1[i]>15){
print(mat1[i])
}
}
c<-(for (i in 1:length(mat1)){
if (mat1[i]>15){
print(mat1[i])
}
})
as.list(c)
d<-as.list(c)
d
c<-c(for (i in 1:length(mat1)){
if (mat1[i]>15){
print(mat1[i])
}
})
d<-as.list(c)
d
d<-as.list(c)
for (i in 1:length(mat1)){
if (mat1[i]>15){
print(mat1[i])
}
}
